{"version":3,"sources":["Components/Slider/AddRemoveSlider.js","Components/Slider/BudgetInput.js","Components/Slider/Sliders.js","Components/Slider/SliderContainer.js","index.js"],"names":["AddRemoveSlider","sliders","changeSliders","onClick","console","log","id","length","addedSliderArray","total","cost","quantity","checked","removedSliderArray","slice","BudgetInput","budget","changeBudget","onChange","event","target","value","numLocked","sliderArray","locked","reduce","acc","curr","costLocked","targetId","cur","Slider","props","changesliders","sliderId","totalBudget","handleQuantityChange","targetObject","sliderQuantity","sliderTotal","totalLocked","newAmount","map","slider","quantityChange","type","min","step","max","newArray","totalChange","lockArray","Sliders","sliderBudget","key","dummylist","SliderContainer","useState","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.015c2380.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst AddRemoveSlider = ({sliders,changeSliders}) =>{\r\n\r\n    const AddSlider =()=>{\r\n      console.log(\"add\")\r\n      const id = sliders.length\r\n      const addedSliderArray = [...sliders,{\r\n        id,\r\n        total: 100,\r\n        cost: 10,\r\n        quantity: 10,\r\n        checked: false\r\n      }]\r\n      console.log(addedSliderArray)\r\n      changeSliders(addedSliderArray)\r\n      //TODO: Update function\r\n    }\r\n    const RemoveSlider =()=>{\r\n      console.log(\"remove\")\r\n      const removedSliderArray = sliders.slice(0,-1)\r\n     changeSliders(removedSliderArray)\r\n     //TODO: Update function\r\n  \r\n    }\r\n  return(\r\n    <div>\r\n      <button onClick ={AddSlider}>Add </button>\r\n      <button onClick ={RemoveSlider}>Remove</button>\r\n    </div>\r\n  \r\n  )\r\n  }\r\n\r\nexport default AddRemoveSlider;","import React from 'react'\r\n\r\nconst BudgetInput =({budget,changeBudget}) =>{\r\n\r\n\r\n    const budgetUpdate = (event)=>{\r\n      changeBudget(event.target.value)\r\n    }\r\n  \r\n    return(\r\n      <h3>\r\n        Budget:\r\n          <input onChange = {budgetUpdate} value ={budget} />\r\n      </h3>\r\n    )\r\n}\r\n\r\nexport default BudgetInput;","import React from 'react'\r\n\r\nconst Sliders =(props) =>{\r\n    const sliderArray = props.sliders;\r\n    const changesliders =props.changesliders; \r\n    const totalBudget =props.totalBudget;\r\n\r\n      return(\r\n        <div>\r\n          {sliderArray.map(slider => { \r\n            return( <Slider \r\n              sliderBudget ={slider.total} \r\n              sliderId={slider.id} \r\n              key = {slider.id} // does not create a prop, needed for react rendering\r\n              changesliders = {changesliders} \r\n              sliderArray = {props.sliders} \r\n              totalBudget ={totalBudget}/>)\r\n            }) }\r\n        </div>\r\n      )\r\n    }\r\n //handles changing totals and quantities based on changed slider\r\nconst totalChange = (targetObject,totalBudget,sliderArray,changesliders) =>{\r\n  const {sliderTotal, sliderId} = targetObject\r\n  const locked = numLocked(sliderArray);\r\n  const totalLocked = costLocked(sliderArray)\r\n  console.log(costLocked(sliderArray))\r\n  const newAmount = (totalBudget-sliderTotal-totalLocked)/(sliderArray.length-1-locked)\r\n  const newArray = sliderArray.map(slider =>{\r\n    if(sliderId === slider.id){\r\n      const changedSlider = {\r\n        ...slider,\r\n        total: sliderTotal,\r\n        quantity: sliderTotal/slider.cost\r\n      };\r\n      return changedSlider\r\n    }\r\n    else if(slider.locked){\r\n      const changedSlider = {\r\n        ...slider,\r\n      };\r\n      return changedSlider\r\n    }\r\n    else{\r\n      const changedSlider = {\r\n        ...slider,\r\n        total: newAmount,\r\n        quantity: newAmount/slider.cost\r\n      };\r\n      return changedSlider\r\n    }\r\n  } )\r\n  changesliders(newArray)\r\n} \r\n\r\n\r\n//working on making changes smoother\r\nconst quantityChange = (targetObject,totalBudget,sliderArray,changesliders) =>{\r\n  const {sliderQuantity, sliderId} = targetObject\r\n  const sliderTotal =sliderQuantity*sliderArray[sliderId].cost ;\r\n  const locked = numLocked(sliderArray);\r\n  const totalLocked = costLocked(sliderArray)\r\n  console.log(costLocked(sliderArray))\r\n  const newAmount = (totalBudget-sliderTotal-totalLocked)/(sliderArray.length-1-locked)\r\n  const newArray = sliderArray.map(slider =>{\r\n    if(sliderId === slider.id){\r\n      const changedSlider = {\r\n        ...slider,\r\n        total: sliderTotal,\r\n        quantity: sliderQuantity\r\n      };\r\n      return changedSlider\r\n    }\r\n    else if(slider.locked){\r\n      const changedSlider = {\r\n        ...slider,\r\n      };\r\n      return changedSlider\r\n    }\r\n    else{\r\n      const changedSlider = {\r\n        ...slider,\r\n        total: newAmount,\r\n        quantity: newAmount/slider.cost\r\n      };\r\n      return changedSlider\r\n    }\r\n  } )\r\n  changesliders(newArray)\r\n} \r\n\r\n\r\n//finds how many sliders are locked in the array \r\nconst numLocked =(sliderArray) =>{\r\n  const locked = sliderArray.reduce((acc,curr)=>{\r\n    if(curr.locked){\r\n      return acc + 1\r\n    }else{\r\n      return acc\r\n    }\r\n  },0)\r\n  console.log(`locked is ${locked}`)\r\n  return locked;\r\n}\r\n\r\n// finds total cost of locked sliders\r\n//TODO: needs update for if modifying locked slider\r\nconst costLocked =(sliderArray,targetId) =>{\r\n\r\n  const cost = sliderArray.reduce((acc,cur) =>{\r\n    if(cur.locked){\r\n     return acc = +cur.total +acc;\r\n    }\r\n    console.log(cur.total)\r\n    return acc\r\n  },0)\r\n  console.log(cost)\r\n  return cost || 0\r\n}\r\n\r\n//Creates the individual sliders, \r\nconst Slider =(props) =>{\r\n    const changesliders = props.changesliders;\r\n    const sliderArray = props.sliderArray;\r\n    const sliderId = props.sliderId;\r\n    const totalBudget = props.totalBudget; // total Budget\r\n      \r\n    //Handles total changes\r\n    const handleTotalChange = (event) => {\r\n        \r\n        const targetObject = {sliderTotal:event.target.value , sliderId: sliderId};\r\n        console.log(targetObject)\r\n        totalChange(targetObject,totalBudget,sliderArray,changesliders);\r\n\r\n      }\r\n\r\n      //handles quantity changes\r\n      const handleQuantityChange = (event)=>{\r\n        const targetObject = {sliderQuantity:event.target.value, sliderId: sliderId}\r\n        quantityChange(targetObject,totalBudget,sliderArray,changesliders);\r\n      }\r\n\r\n\r\n      //handles cost changes, does NOT UPDATE BUDGET\r\n      const handleCostChange = (event)=>{\r\n        const targetId = +event.target.id.slice(4) //takes \"quantity#\" string ID and gets integer \r\n       \r\n        const newArray = sliderArray.map(slider =>{\r\n            if(slider.id === targetId){\r\n              return {...sliderArray[targetId],cost:+event.target.value}\r\n            }\r\n            else return slider;\r\n        })\r\n\r\n        changesliders(newArray)\r\n      }\r\n\r\n      // toggles lock based on sliderID\r\n      const toggleLock =(event) =>{\r\n          const lockId = event.target.id;\r\n          const id = +lockId.slice(4)\r\n          const lockArray = sliderArray.map(slider =>{\r\n            if(id === +slider.id){\r\n              return( {...slider, locked: !slider.locked})\r\n            }else{\r\n              return({...slider})\r\n            }\r\n          }\r\n          )\r\n          changesliders(lockArray)\r\n      }\r\n\r\n      \r\n      return(\r\n        <div>\r\n          <input value = {sliderArray[sliderId].quantity} \r\n          type = \"range\"\r\n          min = {0}\r\n          step = {1}\r\n          max = {totalBudget/sliderArray[sliderId].cost}\r\n          id = {`slider${sliderId}`}\r\n          onChange ={handleQuantityChange}/>\r\n          <input value = {sliderArray[sliderId].quantity} \r\n            id = {`quantity${sliderId}`}\r\n            onChange ={handleQuantityChange}\r\n            /> quantity *\r\n          <input value = {sliderArray[sliderId].cost} \r\n            id = {`cost${sliderId}`}\r\n            onChange = {handleCostChange}\r\n          />cost = \r\n        <input value = {sliderArray[sliderId].total}\r\n          id = {`total${sliderId}`}\r\n          onChange ={handleTotalChange} />\r\n          total\r\n          <input type=\"checkbox\" \r\n          id = {`lock${sliderId}`}\r\n          onChange={toggleLock}\r\n          />\r\n      </div>\r\n      )\r\n    }\r\n\r\nexport default Sliders;","import React,{useState} from 'react'\r\nimport AddRemoveSlider from './AddRemoveSlider'\r\nimport BudgetInput from './BudgetInput'\r\nimport Sliders from './Sliders'\r\n// main, starts with importing dummy list\r\n\r\nconst dummylist =[\r\n    {\r\n      id: 0,\r\n      total: 1000,\r\n      cost: 50,\r\n      quantity: 20,\r\n      locked: false\r\n    },{\r\n      id: 1,\r\n      total: 1000,\r\n      cost: 50,\r\n      quantity: 20,\r\n      locked: false\r\n    },{\r\n      id: 2,\r\n      total: 1000,\r\n      cost: 50,\r\n      quantity: 20,\r\n      locked: false\r\n    }\r\n  ]\r\n\r\n\r\n\r\n\r\nconst SliderContainer =() =>{\r\n    const [budget,changeBudget] =useState(3000) // init. state with int\r\n    const [sliders, changeSliders] =useState(dummylist) // initalizes state with dummy list, should switch to cookies\r\n\r\n\r\n    return (\r\n      <div className =\"App\">\r\n          <BudgetInput budget = {budget} changeBudget = {changeBudget}/>\r\n          <AddRemoveSlider sliders = {sliders} changeSliders = {changeSliders} />\r\n          <Sliders sliders = {sliders} changesliders = {changeSliders} totalBudget={budget} />\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default SliderContainer;","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './App.css';\n//import App from './App';\nimport SliderContainer from './Components/Slider/SliderContainer'\n\n//disabled warnings with ES lint\n// eslint-disable-next-line no-unused-vars\nimport Test from './Components/D3/UserefTest'\n//ReactDOM.render(<SliderContainer />, document.getElementById('root'));\nReactDOM.render(<SliderContainer/>, document.getElementById('root'));\n\n\n"],"sourceRoot":""}